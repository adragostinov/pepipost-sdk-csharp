/*
 * Pepipost
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
using System;
using System.Collections.Generic;
using System.Dynamic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json.Converters;
using Pepipost;
using Pepipost.Utilities;
using Pepipost.Http.Request;
using Pepipost.Http.Response;
using Pepipost.Http.Client;
using Pepipost.Exceptions;

namespace Pepipost.Controllers
{
    public partial class StatsController: BaseController
    {
        #region Singleton Pattern

        //private static variables for the singleton pattern
        private static object syncObject = new object();
        private static StatsController instance = null;

        /// <summary>
        /// Singleton pattern implementation
        /// </summary>
        internal static StatsController Instance
        {
            get
            {
                lock (syncObject)
                {
                    if (null == instance)
                    {
                        instance = new StatsController();
                    }
                }
                return instance;
            }
        }

        #endregion Singleton Pattern

        /// <summary>
        /// Lets you fetch all the subaccounts created by you
        /// </summary>
        /// <param name="startdate">Required parameter: The starting date of the statistics to retrieve. Must follow format YYYY-MM-DD.</param>
        /// <param name="enddate">Optional parameter: The end date of the statistics to retrieve. Defaults to today. Must follow format YYYY-MM-DD.</param>
        /// <param name="aggregatedBy">Optional parameter: Example: </param>
        /// <param name="offset">Optional parameter: Example: 1</param>
        /// <param name="limit">Optional parameter: Example: 100</param>
        /// <return>Returns the object response from the API call</return>
        public object GetStatsGET(
                DateTime startdate,
                DateTime? enddate = null,
                Models.AggregatedByEnum? aggregatedBy = null,
                int? offset = 1,
                int? limit = 100)
        {
            Task<object> t = GetStatsGETAsync(startdate, enddate, aggregatedBy, offset, limit);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Lets you fetch all the subaccounts created by you
        /// </summary>
        /// <param name="startdate">Required parameter: The starting date of the statistics to retrieve. Must follow format YYYY-MM-DD.</param>
        /// <param name="enddate">Optional parameter: The end date of the statistics to retrieve. Defaults to today. Must follow format YYYY-MM-DD.</param>
        /// <param name="aggregatedBy">Optional parameter: Example: </param>
        /// <param name="offset">Optional parameter: Example: 1</param>
        /// <param name="limit">Optional parameter: Example: 100</param>
        /// <return>Returns the object response from the API call</return>
        public async Task<object> GetStatsGETAsync(
                DateTime startdate,
                DateTime? enddate = null,
                Models.AggregatedByEnum? aggregatedBy = null,
                int? offset = 1,
                int? limit = 100)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/stats");

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "startdate", startdate.ToString("yyyy'-'MM'-'dd") },
                { "enddate", (enddate.HasValue) ? enddate.Value.ToString("yyyy'-'MM'-'dd") : null },
                { "aggregated_by", (aggregatedBy.HasValue) ? Models.AggregatedByEnumHelper.ToValue(aggregatedBy.Value) : null },
                { "offset", (null != offset) ? offset : 1 },
                { "limit", (null != limit) ? limit : 100 }
            },ArrayDeserializationFormat,ParameterSeparator);


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" }
            };
            _headers.Add("api_key", Configuration.ApiKey);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if (_response.StatusCode == 400)
                throw new APIException(@"API Response", _context);

            if (_response.StatusCode == 401)
                throw new APIException(@"API Response", _context);

            if (_response.StatusCode == 403)
                throw new APIException(@"API Response", _context);

            if (_response.StatusCode == 405)
                throw new APIException(@"Invalid input", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return _response.Body;
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

    }
} 