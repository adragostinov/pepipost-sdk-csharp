/*
 * Pepipost
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
using System;
using System.Linq;
using System.Collections.Generic;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Pepipost;
using Pepipost.Utilities;

namespace Pepipost.Models
{
    [JsonConverter(typeof(StringValuedEnumConverter))]
    public enum EventsEnum
    {
        PROCESSED, //TODO: Write general description for this method
        SENT, //TODO: Write general description for this method
        OPEN, //TODO: Write general description for this method
        CLICK, //TODO: Write general description for this method
        UNSUBSCRIBE, //TODO: Write general description for this method
        BOUNCE, //TODO: Write general description for this method
        SOFTBOUNCE, //TODO: Write general description for this method
        SPAM, //TODO: Write general description for this method
        INVALID, //TODO: Write general description for this method
        DROPPED, //TODO: Write general description for this method
        HARDBOUNCE, //TODO: Write general description for this method
    }

    /// <summary>
    /// Helper for the enum type EventsEnum
    /// </summary>
    public static class EventsEnumHelper
    {
        //string values corresponding the enum elements
        private static List<string> stringValues = new List<string> { "processed", "sent", "open", "click", "unsubscribe", "bounce", "softbounce", "spam", "invalid", "dropped", "hardbounce" };

        /// <summary>
        /// Converts a EventsEnum value to a corresponding string value
        /// </summary>
        /// <param name="enumValue">The EventsEnum value to convert</param>
        /// <returns>The representative string value</returns>
        public static string ToValue(EventsEnum enumValue)
        {
            switch(enumValue)
            {
                //only valid enum elements can be used
                //this is necessary to avoid errors
                case EventsEnum.PROCESSED:
                case EventsEnum.SENT:
                case EventsEnum.OPEN:
                case EventsEnum.CLICK:
                case EventsEnum.UNSUBSCRIBE:
                case EventsEnum.BOUNCE:
                case EventsEnum.SOFTBOUNCE:
                case EventsEnum.SPAM:
                case EventsEnum.INVALID:
                case EventsEnum.DROPPED:
                case EventsEnum.HARDBOUNCE:
                    return stringValues[(int)enumValue];

                //an invalid enum value was requested
                default:
                    return null;
            }
        }

        /// <summary>
        /// Convert a list of EventsEnum values to a list of strings
        /// </summary>
        /// <param name="enumValues">The list of EventsEnum values to convert</param>
        /// <returns>The list of representative string values</returns>
        public static List<string> ToValue(List<EventsEnum> enumValues)
        {
            if (null == enumValues)
                return null;

            return enumValues.Select(eVal => ToValue(eVal)).ToList();
        }

        /// <summary>
        /// Converts a string value into EventsEnum value
        /// </summary>
        /// <param name="value">The string value to parse</param>
        /// <returns>The parsed EventsEnum value</returns>
        public static EventsEnum ParseString(string value)
        {
            int index = stringValues.IndexOf(value);
            if(index < 0)
                throw new InvalidCastException(string.Format("Unable to cast value: {0} to type EventsEnum", value));

            return (EventsEnum) index;
        }
    }
} 